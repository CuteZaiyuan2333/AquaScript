# AquaScript 项目管理工具

print("=== AquaScript 项目管理系统 ===")

# 项目数据结构（模拟）
# 在实际应用中，这些数据会从文件或数据库中读取

# 任务状态常量
TASK_TODO = "待办"
TASK_IN_PROGRESS = "进行中"
TASK_COMPLETED = "已完成"
TASK_BLOCKED = "阻塞"

# 优先级常量
PRIORITY_LOW = 1
PRIORITY_MEDIUM = 2
PRIORITY_HIGH = 3
PRIORITY_URGENT = 4

# 项目管理函数

func create_task(id, name, priority, estimated_hours):
    print(f"创建任务: [{id}] {name}")
    print(f"  优先级: {get_priority_name(priority)}")
    print(f"  预估工时: {estimated_hours} 小时")
    return id

func get_priority_name(priority):
    if priority == 1:
        return "低"
    elif priority == 2:
        return "中"
    elif priority == 3:
        return "高"
    elif priority == 4:
        return "紧急"
    else:
        return "未知"

func get_status_symbol(status):
    if status == "待办":
        return "⏳"
    elif status == "进行中":
        return "🔄"
    elif status == "已完成":
        return "✅"
    elif status == "阻塞":
        return "🚫"
    else:
        return "❓"

func calculate_progress(completed_tasks, total_tasks):
    if total_tasks == 0:
        return 0
    return (completed_tasks * 100) / total_tasks

func estimate_completion_time(remaining_hours, team_size, daily_hours):
    if team_size == 0 or daily_hours == 0:
        return 0
    total_daily_capacity = team_size * daily_hours
    return remaining_hours / total_daily_capacity

# 项目数据初始化
print("\n--- 初始化项目数据 ---")

# 创建任务
task1 = create_task(1, "设计用户界面", PRIORITY_HIGH, 16)
task2 = create_task(2, "实现后端API", PRIORITY_URGENT, 24)
task3 = create_task(3, "编写单元测试", PRIORITY_MEDIUM, 12)
task4 = create_task(4, "部署到生产环境", PRIORITY_HIGH, 8)
task5 = create_task(5, "编写用户文档", PRIORITY_LOW, 6)

# 模拟任务状态
print("\n--- 当前项目状态 ---")

# 任务列表（模拟数据结构）
print("任务清单:")
print(f"  {get_status_symbol(TASK_COMPLETED)} [1] 设计用户界面 - {TASK_COMPLETED}")
print(f"  {get_status_symbol(TASK_IN_PROGRESS)} [2] 实现后端API - {TASK_IN_PROGRESS}")
print(f"  {get_status_symbol(TASK_TODO)} [3] 编写单元测试 - {TASK_TODO}")
print(f"  {get_status_symbol(TASK_TODO)} [4] 部署到生产环境 - {TASK_TODO}")
print(f"  {get_status_symbol(TASK_BLOCKED)} [5] 编写用户文档 - {TASK_BLOCKED}")

# 项目统计
total_tasks = 5
completed_tasks = 1
in_progress_tasks = 1
blocked_tasks = 1
todo_tasks = 2

progress = calculate_progress(completed_tasks, total_tasks)
print(f"\n项目进度: {progress}% ({completed_tasks}/{total_tasks} 任务完成)")

# 工时统计
total_estimated_hours = 16 + 24 + 12 + 8 + 6
completed_hours = 16
remaining_hours = total_estimated_hours - completed_hours

print(f"工时统计:")
print(f"  总预估工时: {total_estimated_hours} 小时")
print(f"  已完成工时: {completed_hours} 小时")
print(f"  剩余工时: {remaining_hours} 小时")

# 团队资源计算
team_size = 3
daily_working_hours = 8
estimated_days = estimate_completion_time(remaining_hours, team_size, daily_working_hours)

print(f"\n资源分析:")
print(f"  团队规模: {team_size} 人")
print(f"  每日工作时间: {daily_working_hours} 小时")
print(f"  预计完成时间: {estimated_days} 天")

# 风险评估
func assess_project_risk(blocked_tasks, total_tasks, progress):
    risk_score = 0
    
    # 阻塞任务风险
    if blocked_tasks > 0:
        risk_score = risk_score + blocked_tasks * 2
    
    # 进度风险
    if progress < 25:
        risk_score = risk_score + 3
    elif progress < 50:
        risk_score = risk_score + 2
    elif progress < 75:
        risk_score = risk_score + 1
    
    return risk_score

risk_score = assess_project_risk(blocked_tasks, total_tasks, progress)

print(f"\n--- 风险评估 ---")
print(f"风险评分: {risk_score}/10")

if risk_score <= 2:
    print("风险等级: 🟢 低风险")
elif risk_score <= 5:
    print("风险等级: 🟡 中等风险")
elif risk_score <= 8:
    print("风险等级: 🟠 高风险")
else:
    print("风险等级: 🔴 极高风险")

# 建议生成
print("\n--- 项目建议 ---")

if blocked_tasks > 0:
    print("⚠️  发现阻塞任务，建议优先解决依赖问题")

if progress < 50:
    print("📈 项目进度较慢，建议增加资源投入")

if risk_score > 5:
    print("🚨 项目风险较高，建议召开风险评估会议")

# 里程碑计算
func calculate_milestones():
    print("\n--- 项目里程碑 ---")
    
    milestone1_progress = 25
    milestone2_progress = 50
    milestone3_progress = 75
    milestone4_progress = 100
    
    current_progress = progress
    
    if current_progress >= milestone1_progress:
        print("✅ 里程碑1: 项目启动 (25%)")
    else:
        print("⏳ 里程碑1: 项目启动 (25%)")
    
    if current_progress >= milestone2_progress:
        print("✅ 里程碑2: 开发中期 (50%)")
    else:
        print("⏳ 里程碑2: 开发中期 (50%)")
    
    if current_progress >= milestone3_progress:
        print("✅ 里程碑3: 测试阶段 (75%)")
    else:
        print("⏳ 里程碑3: 测试阶段 (75%)")
    
    if current_progress >= milestone4_progress:
        print("✅ 里程碑4: 项目完成 (100%)")
    else:
        print("⏳ 里程碑4: 项目完成 (100%)")

calculate_milestones()

# 生产力分析
func analyze_productivity():
    print("\n--- 生产力分析 ---")
    
    # 模拟每日完成的任务数
    days_worked = 5
    tasks_completed_per_day = completed_tasks / days_worked
    
    print(f"工作天数: {days_worked}")
    print(f"平均每日完成任务: {tasks_completed_per_day}")
    
    if tasks_completed_per_day >= 1:
        print("📊 团队生产力: 优秀")
    elif tasks_completed_per_day >= 0.5:
        print("📊 团队生产力: 良好")
    else:
        print("📊 团队生产力: 需要改进")

analyze_productivity()

# 成本估算
func calculate_project_cost():
    print("\n--- 成本估算 ---")
    
    hourly_rate = 100  # 每小时成本
    total_cost = total_estimated_hours * hourly_rate
    spent_cost = completed_hours * hourly_rate
    remaining_cost = remaining_hours * hourly_rate
    
    print(f"每小时成本: ${hourly_rate}")
    print(f"项目总预算: ${total_cost}")
    print(f"已花费成本: ${spent_cost}")
    print(f"剩余预算: ${remaining_cost}")
    
    budget_usage = (spent_cost * 100) / total_cost
    print(f"预算使用率: {budget_usage}%")

calculate_project_cost()

print("\n=== 项目管理报告生成完成 ===")
print("建议定期更新项目状态以获得准确的分析结果。")
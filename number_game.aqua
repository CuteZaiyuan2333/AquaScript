# AquaScript 数字猜谜游戏

print("=== 欢迎来到数字猜谜游戏 ===")
print("我想了一个1到100之间的数字，你能猜出来吗？")

# 简单的伪随机数生成器
func simple_random(seed, min_val, max_val):
    # 使用线性同余生成器的简化版本
    a = 1664525
    c = 1013904223
    m = 4294967296  # 2^32
    
    # 生成下一个随机数
    next_seed = (a * seed + c) % m
    
    # 映射到指定范围
    range_size = max_val - min_val + 1
    return min_val + (next_seed % range_size)

# 游戏设置
secret_number = simple_random(42, 1, 100)  # 使用固定种子42
max_attempts = 7
attempts = 0

print(f"你有 {max_attempts} 次机会猜中这个数字！")
print("(提示: 这是一个演示版本，数字已经预设)")

# 模拟用户猜测（在实际应用中，这里会是用户输入）
guesses = [50, 75, 63, 69, 66, 68, 67]  # 预设的猜测序列

func check_guess(guess, target):
    if guess == target:
        return "correct"
    elif guess < target:
        return "too_low"
    else:
        return "too_high"

func play_game():
    current_attempts = 0
    won = False
    
    print(f"\n神秘数字已生成: {secret_number}")
    print("开始游戏!")
    
    while current_attempts < max_attempts and not won:
        current_attempts = current_attempts + 1
        current_guess = guesses[current_attempts - 1]
        
        print(f"\n第 {current_attempts} 次猜测: {current_guess}")
        
        result = check_guess(current_guess, secret_number)
        
        if result == "correct":
            print("🎉 恭喜你！猜对了！")
            print(f"你用了 {current_attempts} 次就猜中了数字 {secret_number}!")
            won = True
        elif result == "too_low":
            print("太小了！试试更大的数字。")
        else:
            print("太大了！试试更小的数字。")
        
        if not won and current_attempts < max_attempts:
            remaining = max_attempts - current_attempts
            print(f"还剩 {remaining} 次机会")
    
    if not won:
        print(f"\n😔 游戏结束！正确答案是 {secret_number}")
        print("下次再来挑战吧！")
    
    return won

# 游戏统计
func calculate_score(attempts, max_attempts):
    if attempts <= 3:
        return "优秀"
    elif attempts <= 5:
        return "良好"
    elif attempts <= max_attempts:
        return "及格"
    else:
        return "失败"

# 开始游戏
game_won = play_game()

if game_won:
    score = calculate_score(attempts, max_attempts)
    print(f"\n你的评分: {score}")

# 游戏技巧提示
print("\n=== 游戏技巧 ===")
print("1. 使用二分查找策略")
print("2. 从中间数字开始猜测")
print("3. 根据提示缩小范围")
print("4. 保持冷静，逻辑思考")

# 展示二分查找算法
print("\n=== 二分查找演示 ===")

func binary_search_demo(target, min_range, max_range):
    print(f"寻找数字: {target}")
    print(f"范围: {min_range} 到 {max_range}")
    
    low = min_range
    high = max_range
    attempts = 0
    
    while low <= high:
        attempts = attempts + 1
        mid = (low + high) / 2
        mid = low + (high - low) / 2  # 避免整数溢出
        
        # 转换为整数
        guess = low + (high - low) / 2
        if guess - low + (high - low) / 2 >= 0.5:
            guess = guess + 1
        
        print(f"第 {attempts} 次: 猜测 {guess}")
        
        if guess == target:
            print(f"找到了！用了 {attempts} 次")
            return attempts
        elif guess < target:
            print("太小，向上搜索")
            low = guess + 1
        else:
            print("太大，向下搜索")
            high = guess - 1
    
    return -1

print("演示如何用二分查找找到数字 67:")
binary_search_demo(67, 1, 100)

print("\n=== 游戏结束 ===")
print("感谢游玩 AquaScript 数字猜谜游戏！")
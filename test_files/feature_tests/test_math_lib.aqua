# AquaScript 数学库测试

print("=== AquaScript 数学库功能测试 ===")

# 测试基础数学函数
print("\n--- 基础数学函数 ---")

# 绝对值测试
print("abs(-5) =", abs(-5))
print("abs(3.14) =", abs(3.14))

# 最大值和最小值
print("max(10, 20) =", max(10, 20))
print("min(10, 20) =", min(10, 20))

# 幂运算
print("pow(2, 3) =", pow(2, 3))
print("pow(5, 0) =", pow(5, 0))

# 平方根
print("sqrt(16) =", sqrt(16))
print("sqrt(2) =", sqrt(2))

# 阶乘
print("factorial(5) =", factorial(5))
print("factorial(0) =", factorial(0))

# 最大公约数和最小公倍数
print("gcd(12, 18) =", gcd(12, 18))
print("lcm(4, 6) =", lcm(4, 6))

print("\n--- 三角函数 ---")

# 三角函数测试
print("sin(0) =", sin(0))
print("sin(PI/2) ≈", sin(PI/2))
print("cos(0) =", cos(0))
print("cos(PI) ≈", cos(PI))

print("\n--- 对数和指数函数 ---")

# 对数函数
print("ln(E) ≈", ln(E))
print("log10(100) =", log10(100))
print("exp(1) ≈", exp(1))

print("\n--- 角度转换 ---")

# 角度转换
print("degrees(PI) =", degrees(PI))
print("radians(180) ≈", radians(180))

print("\n--- 数值判断 ---")

# 数值判断
print("is_even(4) =", is_even(4))
print("is_odd(5) =", is_odd(5))
print("is_prime(7) =", is_prime(7))
print("is_prime(8) =", is_prime(8))

print("\n--- 数学常量 ---")
print("PI =", PI)
print("E =", E)

print("\n=== 数学库测试完成 ===")

# 定义基础数学函数
func abs(x):
    if x < 0:
        return -x
    else:
        return x

func max(a, b):
    if a > b:
        return a
    else:
        return b

func min(a, b):
    if a < b:
        return a
    else:
        return b

func pow(base, exponent):
    if exponent == 0:
        return 1
    elif exponent == 1:
        return base
    else:
        var result = 1
        var i = 0
        while i < exponent:
            result = result * base
            i = i + 1
        return result

func sqrt(x):
    if x < 0:
        return 0  # 简化处理
    
    if x == 0:
        return 0
    
    var guess = x / 2
    var epsilon = 0.000001
    var iterations = 0
    
    while abs(guess * guess - x) > epsilon and iterations < 50:
        guess = (guess + x / guess) / 2
        iterations = iterations + 1
    
    return guess

func factorial(n):
    if n < 0:
        return 0  # 简化处理
    
    if n == 0 or n == 1:
        return 1
    
    var result = 1
    var i = 2
    while i <= n:
        result = result * i
        i = i + 1
    
    return result

func gcd(a, b):
    a = abs(a)
    b = abs(b)
    
    while b != 0:
        var temp = b
        b = a % b
        a = temp
    
    return a

func lcm(a, b):
    return abs(a * b) / gcd(a, b)

func sin(x):
    # 简化的正弦函数实现
    var PI = 3.141592653589793
    
    # 将x规范化到[-2π, 2π]范围
    while x > 2 * PI:
        x = x - 2 * PI
    while x < -2 * PI:
        x = x + 2 * PI
    
    # 泰勒级数展开（前几项）
    var result = x
    var term = x
    var i = 1
    
    # 计算前5项
    while i < 5:
        term = term * (-1) * x * x / ((2 * i) * (2 * i + 1))
        result = result + term
        i = i + 1
    
    return result

func cos(x):
    var PI = 3.141592653589793
    return sin(PI / 2 - x)

func ln(x):
    if x <= 0:
        return 0  # 简化处理
    
    if x == 1:
        return 0
    
    # 简化的自然对数实现
    var result = 0
    var term = (x - 1) / x
    var i = 1
    
    while i <= 10:
        result = result + term / i
        term = term * (x - 1) / x
        i = i + 1
    
    return result

func log10(x):
    return ln(x) / ln(10)

func exp(x):
    if x == 0:
        return 1
    
    # 泰勒级数展开（前几项）
    var result = 1
    var term = 1
    var i = 1
    
    while i <= 10:
        term = term * x / i
        result = result + term
        i = i + 1
    
    return result

func degrees(radians):
    var PI = 3.141592653589793
    return radians * 180 / PI

func radians(degrees):
    var PI = 3.141592653589793
    return degrees * PI / 180

func is_even(n):
    return n % 2 == 0

func is_odd(n):
    return n % 2 == 1

func is_prime(n):
    if n < 2:
        return false
    
    if n == 2:
        return true
    
    if is_even(n):
        return false
    
    var i = 3
    while i * i <= n:
        if n % i == 0:
            return false
        i = i + 2
    
    return true

# 数学常量
var PI = 3.141592653589793
var E = 2.718281828459045